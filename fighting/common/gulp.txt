gulp基于文件流的构建系统 
http://www.cnblogs.com/Tzhibin/p/4318457.html

先安装全局gulp
npm install -g gulp
在项目根目录下安装本地gulp
npm install gulp --save-dev

gulp完成javascript压缩合并,css压缩
npm install gulp-clean-css gulp-uglify gulp-concat gulp-rename --save-dev
npm install jshint gulp-jshint --save-dev

livereload需安装chrome插件，启动http-server
npm install http-server -g
项目根目录下 http-server

gulpfile.js
var gulp = require('gulp'),
　　//代替 minifycss
　　cleanCSS = require('gulp-clean-css'),
　　//minifycss = require('gulp-minify-css'),
    concat = require('gulp-concat'),
    uglify = require('gulp-uglify'),
    rename = require('gulp-rename'),
    jshint=require('gulp-jshint'),
    sass = require('gulp-sass'),
    watch = require('gulp-watch'),
    livereload = require('gulp-livereload');

    gulp.task('watch', function(){
        gulp.watch('css/*.scss', ['sass']);

        livereload.listen();//这里需要注意！旧版使用var server = livereload();已经失效
        // app/**/*.* 的意思是 app 文件夹下的 任何文件夹 的 任何文件
        gulp.watch('html/**/*.*', function(event) {
            livereload.changed(event.path);
        });
    });

    //语法检查
    gulp.task('jshint', function () {
        return gulp.src('js/*.js')
            .pipe(jshint())
            .pipe(jshint.reporter('default'));
    });

    //转换sass到css
    gulp.task('sass', function(){
      return gulp.src('css/*.scss')
        .pipe(sass()) // Converts Sass to CSS with gulp-sass
        .pipe(gulp.dest('css'))
    });

    //压缩css
    gulp.task('minifycss', function() {
        return gulp.src('css/*.css')    //需要操作的文件
            .pipe(rename({suffix: '.min'}))   //rename压缩后的文件名
            .pipe(cleanCSS({compatibility: 'ie7'}))   //执行压缩
            .pipe(gulp.dest('css-min'));   //输出文件夹
    });

    //压缩,合并 js
    gulp.task('minifyjs', function() {
        return gulp.src('js/*.js')      //需要操作的文件
            .pipe(concat('main.js'))    //合并所有js到main.js
            .pipe(gulp.dest('js'))       //输出到文件夹
            .pipe(rename({suffix: '.min'}))   //rename压缩后的文件名
            .pipe(uglify())    //压缩
            .pipe(gulp.dest('Js-min'));  //输出
    });

    gulp.task('hello', function() {
    console.log('Hello sass');
    });

　　//默认命令，在cmd中输入gulp后，执行的就是这个任务(压缩js需要在检查js之后操作)
    gulp.task('default',['jshint','sass'],function() {
        gulp.start('minifycss','minifyjs'); 
　　});


gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。

优点：
易于使用：采用代码优于配置策略，Gulp让简单的事情继续简单，复杂的任务变得可管理。
高效：通过利用Node.js强大的流，不需要往磁盘写中间文件，可以更快地完成构建。
高质量：Gulp严格的插件指导方针，确保插件简单并且按你期望的方式工作。
易于学习：通过把API降到最少，你能在很短的时间内学会Gulp。构建工作就像你设想的一样：是一系列流管道。

流：Gulp是一个基于流的构建系统，使用代码优于配置的策略。
插件：Gulp的插件更纯粹，单一的功能，并坚持一个插件只做一件事。
代码优于配置：维护Gulp更像是写代码，而且Gulp遵循CommonJS规范，因此跟写Node程序没有差别。
没有产生中间文件

vs-grunt存在的一些问题

1、插件职能不够单一

2、插件完成了本不该由插件完成的事情（这个我有点迷糊，为什么说是 things don't need to be plugins？）

3、配置过于复杂

4、由于糟糕的流程控制导致的临时文件/目录
