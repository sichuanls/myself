一、Doctype 文档类型
http://dtop.powereasy.net/Item.aspx?id=35
位于html标签之前，声明网页采用什么文档模式解析，主要有三种DTD，过渡transition，严格strict，框架的frame
html5是<!DOCTYPE html>

不存在或格式不正确，则怎么解析
如果在文档开始处没有发现文档类型声明，则所有浏览器都会默认开启混杂模式。但采用混杂模式不是什么值得推荐的做法，因为不同浏览器在这种模式下的行为差异非常大，如果不使用某些hack技术，跨浏览器的行为根本就没有一致性可言。

不同的Doctype触发不同的文档模式（混杂模式quirks mode 标准模式standards mode 准标准模式 超级标准模式）
不同文档模式主要影响CSS内容的呈现，尤其是浏览器对盒模型的解析，但在某些情况下也会影响到JavaScript的解释执行。

标准模式和兼容模式  通过document.compatMode识别 CSS1Compat和BackCompat
区别主要影响样式，不同模式下样式可能不同，比如img的间隙，某些属性的获取（IE clientHight）

 严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。
在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作

二、盒模型
元素类似盒子的结构，对排版至关重要
盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)
有两种， IE 盒子模型、标准 W3C 盒子模型；IE的content部分包含了 border 和 padding，即width=content+padding+border;

三、BFC模式
http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html
Box Formating Context 块级格式化上下文 只有Block-level box参与
特性：独立-与其他的区域不会相互影响
规则：内部Box从上到下放置；内部Box间距离由margin决定，可能会重叠融合，取大值；
      BFC区域不会与float Box重合；BFC区域的高度，内部的浮动元素也参与计算；
      每个元素的左边， 与包含块的左边相接触
如何触发BFC：overflow:hidden;  根元素;  float属性不为none;  position为absolute或fixed; 
				display为inline-block, table-cell, table-caption, flex, inline-flex; overflow不为visible
它是一种规范，决定了元素如何对其内容进行布局，以及与其他元素的关系和相互作用。

四、HTML语义化
header、footer、nav、aside、section、article
1. 去掉或者丢失样式的时候能够让页面呈现出清晰的结构
2. 有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；
3. 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；
4. 便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。

五、frame的作用
优点：
1. 解决加载缓慢的第三方内容如图标和广告等的加载问题
2. 并行加载脚本

缺点：
1. iframe会阻塞主页面的Onload事件
2. 即时内容为空，加载也需要时间
3. 没有语意

六.html5新特性
1.语义化
2.媒体元素 audio video source embed 
3.拖拽 drag drap
4.画布canvas
5.地理 
6.本地离线存储 localStorage
7.表单 input type=email date time url
9.webworker

-画布
<canvas width='200' height='200' id="drawing">浏览器不支持</canvas>
var c=document.getElementById("drawing");
var context=c.getContext(c);//创建2D上下文
//填充
context.fullStyle='red';//填充色
context.fullRect(10,10,50,50);//矩形（x,y,width,height);
//描边
context.strokeStyle='blue';
context.strokeRect(10,10,50,50);
//绘制路径
context.beginPath();
context.moveTo(x,y);//移动画笔
context.lineTo(x,y);//画直线
context.arc(x,y,radius,startDegree,endDegree,是否逆时针);//画直线
context.stroke();//调用
//绘制文本
context.font="bold 14px Arial";
context.textAlign="center";
context.textBaseLine="middle";
context.fullText(stringg,x,y);
//变换??
.translate(x,y) rotate(degree) scale(x,y)
//图像
context.drawImage(url,x,y)
context.drawImage(url,x,y,width,height)
context.drawImage(url,x,y,width,height...) //取部分
//阴影
//渐变

@WebGL3D上下文...

-定位
if(navigator.golocation){
	navigator.golocation.getCurrentPosition(function(position){
		console.log(position.latitude,position.longtitude);
	},fucntion(err){

	});
}

七、网站/页面优化
1.代码(js/css) 压缩合并 -减少http请求
2.规范代码格式，去掉无用的进行精简
3.js放在body尾部，css放在head
4.按需加载
5.图片选取合适的格式，辅助类图片采用雪碧图spirit
6.使用CDN托管
7.缓存的使用
8.标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。 
当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了） 
9.框架优化

八、js延迟加载的方式
1.defer 延迟    ？//脚本被延迟到整个页面都解析完再执行（立即下载，延迟执行）
2.async 异步
3.动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）
var script=document.createElement('div');
script.type="text/javascript";
script.src="url";
script.onload=function(){	
}
script.onerror=function(){	
}
document.body.appendChild(script);

九、优雅降级和渐进增强
1. 优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。
	优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。

2. 渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。渐进增强”观点则认为应关注于内容本身。
sublime插件自动-优雅降级

十、浏览器和前缀
IE -ms 内核或引擎Trident
Chrome/safari -webkit WebKit
firefox -moz Gecko
opera -o Presto

十一、压缩代码工具
gulp
webpack
sublime 插件
nej
UglifyJS 是基于 NodeJS 的 Javascript 语法解析/压缩/格式化工具

十二、同源策略
协议，域名，端口相同
同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。

十三、web安全
https://www.zhihu.com/question/30387107/answer/48019561
https://www.zhihu.com/question/20142673/answer/14114832

@XSS cross site scripting
XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。
解决办法：
用户输入总是不可信任的，过滤用户输入。可采用转义工具进行转义。

@CSRF cross site request forgery 跨站请求伪造
冒充用户在站内的正常操作。绝大多数网站是通过 cookie 等方式辨识用户身份，再予以授权的。
1.登录受信任网站A，并在本地生成Cookie。
2.在不登出A的情况下，访问危险网站B。

解决办法：
表单必须使用post请求。
时效性的token验证。token也需要加密！?
https

十四、跨域！！ 
http://www.cnblogs.com/vajoy/p/4295825.html
http://blog.csdn.net/kongjiea/article/details/44201021

1.jsonp
(JSON with Padding)是JSON的一种“使用模式”，主要是利用script标签不受同源策略限制的特性，向跨域的服务器请求并返回一段JSON数据。
缺点：只支持GET请求而不支持其它类型的HTTP请求；确认请求是否成功不容易，虽然有onerror;

2.postMessage
使用 postMessage 方法和 onmessage 事件来实现不同域之间的通信，其中postMessage用于实时向接收信息的页面发送消息

3.CORS  cross origin resouces share
服务器在响应报头添加Access-Control-Allow-Origin标签，从而允许指定域的站点访问当前域上的资源。

4.window.domain
该方法只适合主域相同但子域不同的情况，比如 a.com 和 www.a.com，我们只需要给这两个页面都加上一句 document.domain = 'a.com' ，就可以在其中一个页面嵌套另一个页面，然后进行窗体间的交互。

5.window.name
window.name 的美妙之处在于，窗体的name值在页面跳转后依旧存在、保持原值（即使跳转的页面不同域），并且可以支持非常长的 name 值（2MB）。如果我们在a页面需要和不同域的b页面通信，我们可以现在a页面嵌入b页面，待b页面有数据要传递时，把数据附加到b页面窗口的window.name上，然后把窗口跳转到一个和a页面同域的c页面，这样a就能轻松获取到内嵌窗体（地址已由跨域的b变为同域的c）的window.name了。

十五、get post区别
1.get是从服务器上获取数据，post是向服务器传送数据。
2.get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。
3.get安全性非常低，post安全性较高。但是执行效率却比Post方法好。
...4.服务端，GET方式需要使用 Request.QueryString 来取得变量的值，POST方式通过 Request.Form 来获取变量的值。
也就是说 Get 是通过地址栏来传值，而 Post 是通过提交表单来传值。


十六、Ajax ，同步和异步
asynchronous javascript and xml
核心xhr
通过异步模式，实现局部刷新，提升了用户体验
Ajax 同步和异步的区别:
1. 同步：提交请求 -> 等待服务器处理 -> 处理完毕返回，这个期间客户端浏览器不能干任何事
2. 异步：请求通过事件触发 -> 服务器处理（这是浏览器仍然可以作其他事情）-> 处理完毕


