@AngularJS的工作原理  
http://www.cnblogs.com/leo_wl/p/3446075.html

@controller、service、router、filter
双向绑定机制
@compile、link(pre-link,post-link)    http://www.jb51.net/article/58229.htm  http://www.bubuko.com/infodetail-694161.html
@指令 directive AEC replace transclude   http://damoqiongqiu.iteye.com/blog/1917971/   http://www.cnblogs.com/haogj/p/3601528.html
@过滤 Filter {{ expression | filter1 | filter2 | ... }}  {{ expression | filter:argument1:argument2:... }}
@依赖注入原理
@路由router 通过不同的URL，告诉(ng-app)加载哪个页面(HTML)，再渲染到(ng-app)视图(ng-view)中。视图是局部刷新的→单页应用
@controller控制器 http://blog.csdn.net/huangyezi/article/details/45373315
当一个控制器通过 ng-controller 指令被添加到DOM中时，ng 会调用该控制器的构造函数来生成一个控制器对象，这样，就创建了一个新的子级 作用域(scope)。在这个构造函数中，作用域(scope)会作为$scope参数注入其中，并允许用户代码访问它。

那么如何进行不同作用域之间的访问呢，在Angularjs中对于作用域访问有个$rootScope 。
在这里有三个函数需要介绍下，
$on(name,handler) 注册一个事件处理函数，该函数在特定的事件被当前作用域收到时将被调用。
$emit(name,args) 向当前父作用域发送一个事件，直至根作用域。
$broadcast(name,args) 向当前作用域下的子作用域发送一个事件，参数是事件名称以及一个用于作用向事件提供额外数据的对象。

在Angular中，不同层级作用域之间的数据通信有多种方式，可以通过原型继承的一些特征，也可以收发事件，还可以使用服务来构造单例对象进行通信。

@按需加载  https://github.com/kuitos/kuitos.github.io/issues/31
		   http://www.cnblogs.com/ys-ys/p/5119086.html  
			   resolve:{
	            deps:["$ocLazyLoad",function($ocLazyLoad){
	                return $ocLazyLoad.load("js/controllers/default.js");
	            }]
	           } 
@Angular中的模块机制 https://github.com/xufei/blog/issues/17
   同名的业务单元不做提示，也就是可能出现覆盖了已经在使用的模块，导致同一个应用中的同名业务单元出现行为不一致的情况，对排错很不利。
   考虑到在前端体系中，JavaScript是需要加载到浏览器才能使用的，module的机制自身也至少应当包括异步加载机制，很可惜，没有。没有模块加载机制，意味着什么呢？意味着做大型应用有麻烦。




